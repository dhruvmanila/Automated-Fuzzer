name: üêß Ruff Check
on:
  push:
  pull_request:
  schedule:
    - cron: '0 22 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  ruff-normal-ci:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: NORMAL_1
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci.toml
            timeout: 10000
            files: "FILES_21"
          - name: NORMAL_2
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci.toml
            timeout: 10000
            files: "FILES_22"
          - name: NORMAL_3
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci.toml
            timeout: 10000
            files: "FILES_23"

          - name: NO_GENERATE_1
            generate-broken-files: false
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_alt.toml
            timeout: 10000
            files: "FILES_21,FILES_22"
          - name: NO_GENERATE_2
            generate-broken-files: false
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_alt.toml
            timeout: 10000
            files: "FILES_23,FILES_24"
          - name: NO_GENERATE_3
            generate-broken-files: false
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_alt.toml
            timeout: 10000
            files: "FILES_25,FILES_26"

          - name: SHORT_NORMAL_1
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci.toml
            timeout: 120
            files: "FILES_25"

          - name: NO_EXCEPTIONS_NORMAL_1
            generate-broken-files: true
            format: false
            exceptions: false
            config-file: fuzz_settings_ci.toml
            timeout: 10000
            files: "FILES_21"
          - name: NO_EXCEPTIONS_NORMAL_2
            generate-broken-files: true
            format: false
            exceptions: false
            config-file: fuzz_settings_ci.toml
            timeout: 10000
            files: "FILES_23"
          - name: NO_EXCEPTIONS_NO_GENERATE_3
            generate-broken-files: false
            format: false
            exceptions: false
            config-file: fuzz_settings_ci_alt.toml
            timeout: 10000
            files: "FILES_25,FILES_26"

          - name: BINARY_NORMAL_1
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_binary.toml
            timeout: 10000
            files: "FILES_21"
          - name: BINARY_NO_EXCEPTIONS_NORMAL_2
            generate-broken-files: true
            format: false
            exceptions: false
            config-file: fuzz_settings_ci_binary.toml
            timeout: 10000
            files: "FILES_22"

          - name: FORMAT_NO_GENERATE_1
            generate-broken-files: false
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_alt_format.toml
            timeout: 10000
            files: "FILES_21,FILES_22"

          - name: ONLY_CHECK_1
            generate-broken-files: true
            format: true
            exceptions: true
            config-file: fuzz_settings_ci_only_check.toml
            timeout: 10000
            files: "FILES_21"

          - name: DEBUG_1
            generate-broken-files: true
            format: false
            exceptions: true
            config-file: fuzz_settings_ci_debug.toml
            timeout: 10000
            files: "FILES_21"

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget

      - name: Install create_broken_files
        run: cargo install create_broken_files

      - name: Install sd
        run: cargo install sd

      - name: Install ruff
        if: matrix.name != 'DEBUG_1'
        run: |
          git clone https://github.com/astral-sh/ruff.git ruff
          cd ruff
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug-assertions = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug = true' Cargo.toml
          sd "MAX_ITERATIONS: usize = 100;" "MAX_ITERATIONS: usize = 500;" crates/ruff_linter/src/linter.rs
          rm rust-toolchain.toml
          cargo install --path crates/ruff_cli
          cd ..

      - name: Install ruff Debug
        if: matrix.name == 'DEBUG_1'
        run: |
          git clone https://github.com/astral-sh/ruff.git ruff
          cd ruff
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sd "MAX_ITERATIONS: usize = 100;" "MAX_ITERATIONS: usize = 500;" crates/ruff_linter/src/linter.rs
          rm rust-toolchain.toml
          cargo install --path crates/ruff_cli --debug
          cd ..

      - name: Remove exceptions
        if: ${{ matrix.exceptions == false }}
        run: |
          cat src/apps/ruff.rs
          sd 'const BROKEN_ITEMS: &\[&str\] = &\[[^]]+];' 'const BROKEN_ITEMS: &[&str] = &[];' src/apps/ruff.rs
          sd 'const INVALID_RULES: &\[&str\] = &\[[^]]+];' 'const INVALID_RULES: &[&str] = &[];' src/apps/ruff.rs
          sd 'const BROKEN_ITEMS_NOT_CRITICAL: &\[&str\] = &\[[^]]+];' 'const BROKEN_ITEMS_NOT_CRITICAL: &[&str] = &[];' src/apps/ruff.rs
          sd 'const BROKEN_ITEMS: &\[&str\] = &\[[^]]+];' 'const BROKEN_ITEMS: &[&str] = &[];' src/apps/dlint.rs
          sd 'const BROKEN_ITEMS: &\[&str\] = &\[[^]]+];' 'const BROKEN_ITEMS: &[&str] = &[];' src/apps/biome.rs
          cat src/apps/ruff.rs

      - name: Build
        run: cargo build --release

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare python data files
        run: |
          CURR_DIR=$(pwd)
          
          GENERATE_BROKEN_FILES=${{ matrix.generate-broken-files }}
          
          if [ "$GENERATE_BROKEN_FILES" = "true" ]; then
            cd /opt/VALID_FILES_DIR
          else
            cd /opt/POSSIBLY_BROKEN_FILES_DIR
          fi
          
          python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          RUST_BACKTRACE=1 timeout ${{ matrix.timeout }} target/release/automated_fuzzer || true

      # Some output files can be not parsable or not broken if closed app before finish
      - name: Remove non crashing files
        if: ${{ matrix.format == false }}
        run: |
          mv fuzz_settings_ci_remove_files.toml fuzz_settings.toml
          RUST_BACKTRACE=1 target/release/automated_fuzzer

      - name: Remove non crashing files
        if: ${{ matrix.format != false }}
        run: |
          mv fuzz_settings_ci_remove_files_format.toml fuzz_settings.toml
          RUST_BACKTRACE=1 target/release/automated_fuzzer

      - name: Remove pycache
        run: |
          rm -rf /opt/BROKEN_FILES_DIR/__pycache__ || true

      - name: Store results
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          name: ${{ matrix.name }}
          path: /opt/BROKEN_FILES_DIR

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true

