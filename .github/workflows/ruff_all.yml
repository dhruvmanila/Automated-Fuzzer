name: üêß Ruff All
on:
  push:
  pull_request:
  schedule:
    - cron: '0 22 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  ruff-normal-ci:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Normal 1
            generate-broken-files: true
            config-file: fuzz_settings_ci.toml
            timeout: 1
            output-name: NORMAL_1
            file-name: FILES_11
          - name: Normal 2
            generate-broken-files: true
            config-file: fuzz_settings_ci.toml
            timeout: 1
            output-name: NORMAL_2
            file-name: FILES_12
          - name: NORMAL_3
            generate-broken-files: true
            config-file: fuzz_settings_ci.toml
            timeout: 1
            file-name: FILES_13

          - name: NO_GENERATE_1
            generate-broken-files: false
            config-file: fuzz_settings_ci_alt.toml
            timeout: 1
            file-name: FILES_11
          - name: NO_GENERATE_2
            generate-broken-files: false
            config-file: fuzz_settings_ci_alt.toml
            timeout: 1
            file-name: FILES_12
          - name: NO_GENERATE_3
            generate-broken-files: false
            config-file: fuzz_settings_ci_alt.toml
            timeout: 1
            file-name: FILES_13

    steps:
      - uses: actions/checkout@v3

#      - name: Install dependencies
#        run: |
#          sudo apt update
#          sudo apt install -y wget
#
#      - name: Build
#        run: cargo build --release
#
#      - name: Install create_broken_files
#        run: cargo install create_broken_files
#
#      - name: Install ruff
#        run: cargo install --git https://github.com/astral-sh/ruff.git ruff_cli
#
#      - name: Create folders
#        run: |
#          mkdir /opt/VALID_FILES_DIR
#          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
#          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare python data files
        if: matrix.generate-broken-files || matrix.generate-broken-files
        run: |
          CURR_DIR=$(pwd)
          
#          GENERATE_BROKEN_FILES=${{ matrix.generate-broken-files }}
#          cd /opt/VALID_FILES_DIR
          
          FILE_NAME=${{ matrix.file-name }}
          wget "https://github.com/qarmin/Automated-Fuzzer/releases/download/test/${FILE_NAME}.zip"
          unzip "${FILE_NAME}.zip"
          rm "${FILE_NAME}.zip"
          
          cd $CURR_DIR

      - name: Download and prepare python data files
        if: matrix.generate-broken-files || matrix.generate-broken-files
        run: |
          CURR_DIR=$(pwd)

#          GENERATE_BROKEN_FILES=${{ matrix.generate-broken-files }}
#          cd /opt/POSSIBLY_BROKEN_FILES_DIR

          FILE_NAME=${{ matrix.file-name }}
          wget "https://github.com/qarmin/Automated-Fuzzer/releases/download/test/${FILE_NAME}.zip"
          unzip "${FILE_NAME}.zip"
          rm "${FILE_NAME}.zip"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          timeout ${{ matrix.timeout }} target/release/automated_fuzzer || true

      # Some output files can be not parsable or not broken if closed app before finish
      - name: Remove non crashing files
        run: |
          mv fuzz_settings_ci_remove_files.toml fuzz_settings.toml
          target/release/automated_fuzzer

      - name: Remove pycache
        run: |
          rm -rf /opt/BROKEN_FILES_DIR/__pycache__ || true

      - name: Store results
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          name: ${{ matrix.name }}
          path: /opt/BROKEN_FILES_DIR

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || exit 0

